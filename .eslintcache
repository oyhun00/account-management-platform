[{"E:\\project\\account-management-platform\\src\\index.js":"1","E:\\project\\account-management-platform\\src\\App.js":"2","E:\\project\\account-management-platform\\src\\Stores\\index.js":"3","E:\\project\\account-management-platform\\src\\Components\\index.js":"4","E:\\project\\account-management-platform\\src\\Stores\\AccountStore.js":"5","E:\\project\\account-management-platform\\src\\Stores\\UtilStore.js":"6","E:\\project\\account-management-platform\\src\\Stores\\GroupStore.js":"7","E:\\project\\account-management-platform\\src\\Stores\\LinkedAccountStore.js":"8","E:\\project\\account-management-platform\\src\\Stores\\UseStore.js":"9","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Util\\Loading.js":"10","E:\\project\\account-management-platform\\src\\Components\\Layout\\Side\\index.js":"11","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\index.js":"12","E:\\project\\account-management-platform\\src\\Components\\Layout\\Side\\GroupItem.js":"13","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\AccountCard.js":"14","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\CreateAccountCard.js":"15","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Form\\AccountForm.js":"16","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Form\\linkedAccountFrom.js":"17"},{"size":516,"mtime":1651164279287,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1651220740518,"results":"20","hashOfConfig":"19"},{"size":444,"mtime":1651219974341,"results":"21","hashOfConfig":"19"},{"size":1016,"mtime":1651220107861,"results":"22","hashOfConfig":"19"},{"size":5239,"mtime":1651219901366,"results":"23","hashOfConfig":"19"},{"size":191,"mtime":1651220094963,"results":"24","hashOfConfig":"19"},{"size":4279,"mtime":1651219944278,"results":"25","hashOfConfig":"19"},{"size":4262,"mtime":1651220085182,"results":"26","hashOfConfig":"19"},{"size":168,"mtime":1651220089557,"results":"27","hashOfConfig":"19"},{"size":610,"mtime":1651220513413,"results":"28","hashOfConfig":"19"},{"size":3325,"mtime":1651220268870,"results":"29","hashOfConfig":"19"},{"size":3841,"mtime":1651220371655,"results":"30","hashOfConfig":"19"},{"size":2681,"mtime":1651220916397,"results":"31","hashOfConfig":"19"},{"size":4223,"mtime":1651220447335,"results":"32","hashOfConfig":"19"},{"size":736,"mtime":1651220402507,"results":"33","hashOfConfig":"19"},{"size":4413,"mtime":1651220690096,"results":"34","hashOfConfig":"19"},{"size":2983,"mtime":1651220700379,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"em7jzh",{"filePath":"39","messages":"40","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"E:\\project\\account-management-platform\\src\\index.js",["87"],"import { Suspense } from 'react';\nimport { Provider } from 'mobx-react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport Stores from './Stores';\n\nReactDOM.render(\n  <Provider\n    LinkedAccountStore={Stores.LinkedAccountStore}\n    AccountStore={Stores.AccountStore}\n    GroupStore={Stores.GroupStore}\n    UtilStore={Stores.UtilStore}\n  >\n    <Suspense fallback={<div>Loading... </div>}>\n      <App />\n    </Suspense>\n  </Provider>,\n  document.getElementById('root'),\n);\n","E:\\project\\account-management-platform\\src\\App.js",["88"],"import styled from 'styled-components';\nimport { Layout } from 'antd';\nimport MainComponent from './Components';\n\nconst App = () => (\n  <CustomLayout>\n    <MainComponent />\n  </CustomLayout>\n);\n\nconst CustomLayout = styled(Layout)`\n  height: 100vh;\n  background: #19171d;\n  overflow: hidden;\n\n  .ant-layout {\n    background: #222529;\n  }\n`;\n\nexport default App;\n","E:\\project\\account-management-platform\\src\\Stores\\index.js",["89"],"import AccountStore from './AccountStore';\nimport GroupStore from './GroupStore';\nimport LinkedAccountStore from './LinkedAccountStore';\nimport UtilStore from './UtilStore';\n\nclass RootStore {\n  constructor() {\n    this.LinkedAccountStore = new LinkedAccountStore(this);\n    this.AccountStore = new AccountStore(this);\n    this.GroupStore = new GroupStore(this);\n    this.UtilStore = new UtilStore(this);\n  }\n}\n\nexport default new RootStore();\n","E:\\project\\account-management-platform\\src\\Components\\index.js",["90"],"import { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Layout } from 'antd';\nimport Side from './Layout/Side';\nimport ContentBox from './Layout/Content';\nimport useStores from '../Stores/UseStore';\nimport Loading from './Layout/Content/Util/Loading';\n\nconst { Sider } = Layout;\n\nconst MainComponent = observer(() => {\n  const { GroupStore, UtilStore } = useStores();\n  const { getFirstGroup } = GroupStore;\n  const { isLoading } = UtilStore;\n\n  useEffect(() => {\n    getFirstGroup();\n  }, [getFirstGroup]);\n\n  return (\n    <>\n      <CustomSider>\n        <Side />\n      </CustomSider>\n      <CustomMainLayout>\n        <ContentBox />\n      </CustomMainLayout>\n      { isLoading ? <Loading /> : '' }\n    </>\n  );\n});\n\nconst CustomSider = styled(Sider)`\n  background: #19171d;\n  border-right: 1px solid #2a272f;\n  box-sizing: content-box;\n  height: 100%;\n`;\n\nconst CustomMainLayout = styled(Layout)`\n  overflow: auto;\n`;\n\nexport default MainComponent;\n","E:\\project\\account-management-platform\\src\\Stores\\AccountStore.js",["91"],"import { makeAutoObservable, action, toJS } from 'mobx';\nimport { message } from 'antd';\n\nconst { ipcRenderer } = window;\n\nclass AccountStore {\n  accountList = [];\n\n  accountFormOption = {\n    isUpdate: false,\n    isVisible: false,\n  };\n\n  accountFormat = {\n    siteIcon: '',\n    isLocalIcon: false,\n    iconName: '',\n    siteNameKr: '',\n    siteNameEng: '',\n    siteUrl: '',\n    accountId: '',\n    accountPwd: '',\n    linkId: '',\n    group: '',\n  };\n\n  isLink = false;\n\n  constructor(root) {\n    this.root = root;\n    makeAutoObservable(this);\n  }\n\n  getAccountDetail = (id) => {\n    ipcRenderer.invoke('main/getAccountDetail', id)\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { data } = result;\n\n            this.accountFormat = {\n              ...data,\n            };\n\n            this.accountFormOption = {\n              isUpdate: true,\n              isVisible: true,\n            };\n\n            if (data.linkId) {\n              this.isLink = true;\n            }\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n\n  getAccountList = () => {\n    ipcRenderer.invoke('main/getAccount')\n      .then(action((result) => {\n        const { success, log } = result;\n\n        if (success) {\n          const { accountData } = result;\n\n          this.accountList = accountData;\n\n          if (log) {\n            message.success(log);\n          }\n        } else {\n          message.error(log);\n        }\n      }));\n  };\n\n  removeAccount = (id) => {\n    ipcRenderer.invoke('main/removeAccount', id)\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { accountData } = result;\n\n            this.accountList = accountData;\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n\n  toggleCreateAccount = () => {\n    this.accountFormOption.isVisible = true;\n  };\n\n  formValidation = () => {\n    const {\n      siteNameKr, siteUrl, accountId, accountPwd, linkId,\n    } = this.accountFormat;\n\n    if (this.isLink) {\n      if (!siteNameKr || !siteUrl || !linkId) {\n        return false;\n      }\n\n      return true;\n    }\n    if (!siteNameKr || !siteUrl || !accountId || !accountPwd) {\n      return false;\n    }\n\n    return true;\n  };\n\n  linkedOption = (value) => {\n    this.isLink = value;\n\n    if (value) {\n      if (this.root.LinkedAccountStore.linkedAccountList.length) {\n        this.accountFormat = {\n          ...this.accountFormat,\n          linkId: this.root.LinkedAccountStore.linkedAccountList[0].id,\n          accountId: '',\n          accountPwd: '',\n        };\n      } else {\n        this.isLink = false;\n        message.error('연동 계정을 등록해주세요.');\n      }\n    } else {\n      this.accountFormat = {\n        ...this.accountFormat,\n        linkId: '',\n        accountId: '',\n        accountPwd: '',\n      };\n    }\n  };\n\n  linkIdChangeHandle = (value) => {\n    this.accountFormat.linkId = value;\n  };\n\n  fileChangeHandle = () => {\n    ipcRenderer.invoke('main/getIconPath')\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { iconName } = result;\n\n            this.accountFormat.iconName = iconName;\n            this.accountFormat.isLocalIcon = true;\n          }\n        }),\n      );\n  };\n\n  formChangeHandle = (e) => {\n    const { value, name } = e.target;\n\n    this.accountFormat = {\n      ...this.accountFormat,\n      [name]: value,\n    };\n  };\n\n  deleteLocalIcon = () => {\n    this.accountFormat = {\n      ...this.accountFormat,\n      iconName: '',\n      isLocalIcon: false,\n    };\n  };\n\n  clearAccountFormat = () => {\n    this.accountFormat = {\n      ...this.accountFormat,\n      siteNameKr: '',\n      siteNameEng: '',\n      siteUrl: '',\n      accountId: '',\n      accountPwd: '',\n      siteIcon: '',\n      isLocalIcon: false,\n      linkId: '',\n    };\n    this.isLink = false;\n  };\n\n  modalClose = () => {\n    this.accountFormOption = {\n      isUpdate: false,\n      isVisible: false,\n    };\n    this.clearAccountFormat();\n  };\n\n  // eslint-disable-next-line consistent-return\n  formSubmit = (_action) => {\n    if (!this.formValidation()) {\n      message.error('필수 입력 값을 확인해 주세요.');\n\n      return false;\n    }\n    this.accountFormat.group = this.root.GroupStore.selectedGroup;\n    this.root.UtilStore.isLoading = true;\n\n    const channel = _action === 'create' ? 'main/createAccount' : 'main/updateAccount';\n\n    ipcRenderer.invoke(channel, toJS(this.accountFormat))\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { accountData } = result;\n\n            this.accountList = accountData;\n            this.root.UtilStore.isLoading = false;\n            this.modalClose();\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n}\n\nexport default AccountStore;\n","E:\\project\\account-management-platform\\src\\Stores\\UtilStore.js",["92"],"import { makeAutoObservable } from 'mobx';\n\nclass UtilStore {\n  isLoading = false;\n\n  constructor(root) {\n    this.root = root;\n    makeAutoObservable(this);\n  }\n}\n\nexport default UtilStore;\n","E:\\project\\account-management-platform\\src\\Stores\\GroupStore.js",["93"],"import { makeAutoObservable, action } from 'mobx';\nimport { message, Modal } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { ipcRenderer } = window;\n\nclass GroupStore {\n  isAdd = false;\n\n  groupList = [];\n\n  groupAddValue = '';\n\n  groupUpdateValue = '';\n\n  selectedGroup = '';\n\n  constructor(root) {\n    this.root = root;\n    makeAutoObservable(this);\n  }\n\n  onChangeValue = (e) => {\n    this[e.target.name] = e.target.value;\n  };\n\n  setSelectedGroup = (value) => {\n    if (this.selectedGroup === value && this.selectedGroup === 0) {\n      message.info('이미 표시중인 화면입니다.');\n    }\n\n    this.selectedGroup = value;\n  };\n\n  setAddStatus = () => {\n    this.isAdd = !this.isAdd;\n  };\n\n  getGroupList = () => {\n    ipcRenderer.invoke('side/getGroupList')\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { data, log } = result;\n            this.groupList = data;\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(result.log);\n          }\n        }),\n      );\n  };\n\n  getFirstGroup = () => {\n    ipcRenderer.invoke('side/getFirstGroup')\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { data, log, code } = result;\n            this.selectedGroup = code === 1 ? data : 0;\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(result.log);\n          }\n        }),\n      );\n  };\n\n  addGroup = () => {\n    if (!this.groupAddValue) {\n      message.warning('최소 1글자 이상 입력하세요.');\n      return;\n    }\n\n    ipcRenderer.invoke('side/createGroup', this.groupAddValue)\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { data, log } = result;\n            this.groupList = data;\n            this.selectedGroup = data[data.length - 1].id;\n            this.isAdd = !this.isAdd;\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(result.log);\n          }\n        }),\n      );\n  };\n\n  removeGroup = (id) => {\n    const that = this;\n\n    Modal.confirm({\n      title: '정말로 삭제하시겠어요?',\n      icon: <ExclamationCircleOutlined />,\n      content: '해당 그룹에 저장된 계정 정보도 모두 사라집니다.',\n      onOk() {\n        ipcRenderer.invoke('side/removeGroup', id)\n          .then(\n            action((result) => {\n              const { success } = result;\n\n              if (success) {\n                const { data, log } = result;\n                that.groupList = data;\n                that.selectedGroup = data.length ? data[data.length - 1].id : 0;\n\n                if (log) {\n                  message.success(log);\n                }\n              } else {\n                message.error(result.log);\n              }\n            }),\n          );\n      },\n      onCancel() {\n      },\n    });\n  };\n\n  toggleUpdateGroup = (e, id) => {\n    e.stopPropagation();\n\n    const { groupName } = this.groupList.find((v) => v.id === id);\n\n    this.groupUpdateValue = groupName;\n\n    const addedGroupList = this.groupList.map(\n      (v) => (v.id === id\n        ? { ...v, updateStatus: !v.updateStatus }\n        : { ...v, updateStatus: v.updateStatus }),\n    );\n    this.groupList = addedGroupList;\n  };\n\n  updateGroup = (id) => {\n    if (!this.groupUpdateValue) {\n      message.warning('최소 1글자 이상 입력하세요.');\n      return;\n    }\n\n    const updateGroupList = this.groupList.map(\n      (v) => (v.id === id\n        ? { ...v, groupName: this.groupUpdateValue, updateStatus: false }\n        : { ...v }),\n    );\n\n    ipcRenderer.invoke('side/updateGroup', updateGroupList)\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { log } = result;\n\n            if (log) {\n              message.success(log);\n            }\n\n            this.groupList = updateGroupList;\n          } else {\n            message.error(result.log);\n          }\n        }),\n      );\n  };\n}\n\nexport default GroupStore;\n","E:\\project\\account-management-platform\\src\\Stores\\LinkedAccountStore.js",["94"],"import { makeAutoObservable, action, toJS } from 'mobx';\nimport { message } from 'antd';\n\nconst { ipcRenderer } = window;\n\nclass LinkedAccountStore {\n  linkedAccountList = [];\n\n  linkedAccountFormat = {\n    siteNameKr: '',\n    siteNameEng: '',\n    accountId: '',\n    accountPwd: '',\n    siteIcon: '',\n    iconName: '',\n    iconUse: false,\n  };\n\n  formOption = {\n    isUpdate: false,\n    isVisible: false,\n  };\n\n  constructor(root) {\n    this.root = root;\n    makeAutoObservable(this);\n  }\n\n  formValidation = () => {\n    const {\n      siteNameKr, siteNameEng, accountId, accountPwd,\n    } = this.linkedAccountFormat;\n\n    if (!siteNameKr || !siteNameEng || !accountId || !accountPwd) { return false; }\n\n    return true;\n  };\n\n  clearFormat = () => {\n    this.linkedAccountFormat = {\n      siteNameKr: '',\n      siteNameEng: '',\n      siteIcon: '',\n      iconName: '',\n      iconUse: false,\n    };\n  };\n\n  modalClose = () => {\n    this.formOption = {\n      isUpdate: false,\n      isVisible: false,\n    };\n    this.clearFormat();\n  };\n\n  deleteLocalIcon = () => {\n    this.linkedAccountFormat = {\n      ...this.linkedAccountFormat,\n      siteIcon: '',\n      iconName: '',\n      iconUse: false,\n    };\n  };\n\n  toggleCreateLinkedAccount = () => {\n    this.formOption.isVisible = true;\n  };\n\n  formChangeHandle = (e) => {\n    const { value, name } = e.target;\n\n    this.linkedAccountFormat = {\n      ...this.linkedAccountFormat,\n      [name]: value,\n    };\n  };\n\n  fileChangeHandle = () => {\n    ipcRenderer.invoke('link/getIconPath')\n      .then(\n        action((result) => {\n          const { success } = result;\n\n          if (success) {\n            const { iconName } = result;\n\n            this.linkedAccountFormat.iconName = iconName;\n            this.linkedAccountFormat.iconUse = true;\n          }\n        }),\n      );\n  };\n\n  getLinkedAccountList = () => {\n    ipcRenderer.invoke('link/getAccount')\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { linkedAccountData } = result;\n            this.linkedAccountList = linkedAccountData;\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n\n  getLinkedAccountDetail = (id) => {\n    ipcRenderer.invoke('link/getAccountDetail', id)\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { data } = result;\n\n            this.linkedAccountFormat = {\n              ...data,\n            };\n\n            this.formOption = {\n              isUpdate: true,\n              isVisible: true,\n            };\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n\n  removeLinkedAccount = (id) => {\n    ipcRenderer.invoke('link/removeAccount', id)\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { linkedAccountData, accountData } = result;\n\n            this.root.AccountStore.accountList = accountData;\n            this.linkedAccountList = linkedAccountData;\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n\n  // eslint-disable-next-line consistent-return\n  formSubmit = (_action) => {\n    if (!this.formValidation()) {\n      message.error('필수 입력 값을 확인해 주세요.');\n\n      return false;\n    }\n    this.linkedAccountFormat.group = 0;\n\n    const channel = _action === 'create' ? 'link/createAccount' : 'link/updateAccount';\n\n    ipcRenderer.invoke(channel, toJS(this.linkedAccountFormat))\n      .then(\n        action((result) => {\n          const { success, log } = result;\n\n          if (success) {\n            const { linkedAccountData } = result;\n\n            this.linkedAccountList = linkedAccountData;\n            this.modalClose();\n\n            if (log) {\n              message.success(log);\n            }\n          } else {\n            message.error(log);\n          }\n        }),\n      );\n  };\n}\n\nexport default LinkedAccountStore;\n","E:\\project\\account-management-platform\\src\\Stores\\UseStore.js",["95"],"import React from 'react';\nimport { MobXProviderContext } from 'mobx-react';\n\nconst useStores = () => React.useContext(MobXProviderContext);\n\nexport default useStores;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Util\\Loading.js",["96"],"import { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Spin, Space } from 'antd';\n\nconst Loading = observer(() => (\n  <CustomSpace size=\"middle\">\n    <CustomSpin size=\"large\" />\n  </CustomSpace>\n));\n\nconst CustomSpace = styled(Space)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n  background: rgb(25 23 29 / 73%);\n  height: 100vh;\n  width: 100vw;\n  text-align: center;\n  margin: 0 auto !important;\n\n  & .ant-space-item {\n    margin: 0 auto;\n  }\n`;\n\nconst CustomSpin = styled(Spin)`\n  margin: 0 auto !important;\n  text-align: center;\n`;\n\nexport default Loading;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Side\\index.js",["97"],"import { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Menu, Input, Row, Col,\n} from 'antd';\nimport {\n  PlusOutlined,\n  CloseOutlined,\n  LinkOutlined,\n} from '@ant-design/icons';\nimport useStores from '../../../Stores/UseStore';\nimport GroupItem from './GroupItem';\n\nconst Side = observer(() => {\n  const { GroupStore } = useStores();\n  const {\n    setSelectedGroup, selectedGroup, setAddStatus, isAdd,\n    getGroupList, groupList, addGroup, onChangeValue,\n  } = GroupStore;\n\n  useEffect(() => {\n    getGroupList();\n  }, [getGroupList]);\n\n  const groupItem = groupList.map((v) => (\n    <CustomMenuItem key={v.id} onClick={() => setSelectedGroup(v.id)}>\n      <GroupItem data={v} />\n    </CustomMenuItem>\n  ));\n\n  return (\n    <CustomSider>\n      <CustomMenu\n        defaultSelectedKeys={[selectedGroup.toString()]}\n        defaultOpenKeys={[`sub${selectedGroup.toString()}`]}\n        selectedKeys={[selectedGroup.toString()]}\n        mode=\"inline\"\n        theme=\"dark\"\n      >\n        {groupItem}\n      </CustomMenu>\n      {\n        isAdd\n          ? (\n            <CustomRow>\n              <Col span={20}>\n                <CustomInput name=\"groupAddValue\" onChange={onChangeValue} />\n              </Col>\n              <CustomPlusIconWrap span={4} onClick={addGroup}>\n                <PlusOutlined />\n              </CustomPlusIconWrap>\n            </CustomRow>\n          )\n          : ''\n      }\n      <CustomRow>\n        <CustomPlusIconWrap onClick={() => setAddStatus(!isAdd)}>\n          {\n            isAdd\n              ? (\n                <CloseOutlined />\n              )\n              : (\n                <>\n                  <CustomPlusOutlined />\n                  <AddComment>그룹 추가</AddComment>\n                </>\n              )\n          }\n        </CustomPlusIconWrap>\n      </CustomRow>\n      <CustomFixedRow>\n        <CustomLinkOutlined onClick={() => setSelectedGroup(0)} />\n      </CustomFixedRow>\n    </CustomSider>\n  );\n});\n\nconst CustomSider = styled.div`\n  position: relative;\n  background: #19171d;\n  color: rgba(255, 255, 255, 0.65);\n  height: 100%;\n`;\n\nconst CustomMenu = styled(Menu)`\n  background: #19171d !important;\n  overflow: auto;\n  max-height: calc(100% - 80px);\n\n  & .ant-menu-item-selected {\n    background-color: #242229 !important;\n  }\n`;\n\nconst CustomMenuItem = styled(Menu.Item)`\n  background-color: #19171d;\n`;\n\nconst CustomRow = styled(Row)`\n  padding: 0 16px 0 24px;\n  height: 30px;\n  line-height: 40px;\n`;\n\nconst CustomPlusIconWrap = styled(Col)`\n  text-align: center;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nconst CustomPlusOutlined = styled(PlusOutlined)`\n  background: #332f3c;\n  padding: 4px;\n  border-radius: 3px;\n\n  & > svg { \n    width: 0.9em;\n    height: 0.9em;\n  }\n`;\n\nconst CustomFixedRow = styled(Row)`\n  position: fixed;\n  bottom: 0;  \n  padding: 15px 16px 15px 24px;\n`;\n\nconst CustomLinkOutlined = styled(LinkOutlined)`\n  cursor: pointer;\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nconst AddComment = styled.span`\n  margin-left: 8px;\n`;\n\nconst CustomInput = styled(Input)`\n  background: rgb(40 39 44);\n  border: 1px solid #4a4a4a;\n  padding: 1px 11px;\n  color: rgba(255, 255, 255, 0.65);\n\n  :focus, :hover {\n    border-color: #fff;\n    color: #fff;\n  }\n`;\n\nexport default Side;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\index.js",["98"],"import { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Layout, Row, Col, Empty, Button,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport useStores from '../../../Stores/UseStore';\nimport CreateAccountCard from './CreateAccountCard';\nimport LinkedAccountForm from './Form/linkedAccountFrom';\nimport AccountForm from './Form/AccountForm';\nimport AccountCard from './AccountCard';\n\nconst { Content } = Layout;\n\nconst ContentBox = observer(() => {\n  const { AccountStore, GroupStore, LinkedAccountStore } = useStores();\n  const {\n    getAccountList, accountList,\n    accountFormOption, toggleCreateAccount,\n  } = AccountStore;\n  const { selectedGroup } = GroupStore;\n  const {\n    getLinkedAccountList, linkedAccountList,\n    toggleCreateLinkedAccount, formOption,\n  } = LinkedAccountStore;\n\n  useEffect(() => {\n    getAccountList();\n    getLinkedAccountList();\n  }, [getAccountList, getLinkedAccountList, selectedGroup]);\n\n  const accountFilteredData = selectedGroup !== 0\n    ? accountList.reduce((acc, cur) => {\n      if (cur.group === selectedGroup) {\n        acc.push(\n          <Col\n            key={cur.id}\n            xl={{ span: 6 }}\n            lg={{ span: 8 }}\n            md={{ span: 12 }}\n            sm={{ span: 24 }}\n            xs={{ span: 24 }}\n          >\n            <AccountCard\n              data={cur}\n              linkedAccountList={linkedAccountList}\n            />\n          </Col>,\n        );\n      }\n      return acc;\n    }, [])\n    : linkedAccountList.reduce((acc, cur) => {\n      acc.push(\n        <Col\n          key={cur.id}\n          xl={{ span: 6 }}\n          lg={{ span: 8 }}\n          md={{ span: 12 }}\n          sm={{ span: 24 }}\n          xs={{ span: 24 }}\n        >\n          <AccountCard\n            selectedGroup={selectedGroup}\n            data={cur}\n          />\n        </Col>,\n      );\n      return acc;\n    }, []);\n\n  return (\n    <>\n      <CustomContent>\n        {\n          accountFilteredData.length !== 0\n            ? (\n              <Row>\n                {accountFilteredData}\n                <Col\n                  xl={{ span: 6 }}\n                  lg={{ span: 8 }}\n                  md={{ span: 12 }}\n                  sm={{ span: 24 }}\n                  xs={{ span: 24 }}\n                  onClick={selectedGroup ? toggleCreateAccount : toggleCreateLinkedAccount}\n                >\n                  <CreateAccountCard />\n                </Col>\n              </Row>\n            )\n            : (\n              <EmptyWrap>\n                <CustomEmpty>\n                  <CustomButton\n                    type=\"primary\"\n                    shape=\"round\"\n                    onClick={selectedGroup ? toggleCreateAccount : toggleCreateLinkedAccount}\n                  >\n                    <PlusOutlined />\n                    { selectedGroup ? '계정 정보 등록' : '연동 계정 등록' }\n                  </CustomButton>\n                </CustomEmpty>\n              </EmptyWrap>\n            )\n        }\n      </CustomContent>\n      <AccountForm\n        accountFormOption={accountFormOption}\n        linkedAccountList={linkedAccountList}\n      />\n      <LinkedAccountForm\n        formOption={formOption}\n      />\n    </>\n  );\n});\n\nconst CustomContent = styled(Content)`\n  padding: 12px;\n  color: #fff;\n`;\n\nconst EmptyWrap = styled.div`\n  display: table;\n  height: 100%;\n  width: 100%;\n  color: rgba(255, 255, 255, 0.65);\n`;\n\nconst CustomEmpty = styled(Empty)`\n  display: table-cell;\n  vertical-align: middle;\n  height: 100%;\n`;\n\nconst CustomButton = styled(Button)`\n  border: 0;\n  background: linear-gradient(45deg, #3b9c78, #2278ab, #7022ab);\n  padding: 4px 26px;\n\n  :hover, :active, :focus {\n    background: linear-gradient(45deg,#3b9c78,#2298ab,#c81ddc);\n  }\n`;\n\nexport default ContentBox;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Side\\GroupItem.js",["99"],"import { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Input, Popover, Button, List,\n} from 'antd';\nimport {\n  CloseOutlined,\n  EditOutlined,\n  CheckOutlined,\n  MoreOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport useStores from '../../../Stores/UseStore';\n\nconst GroupItem = observer(({ data }) => {\n  const { GroupStore } = useStores();\n  const {\n    groupUpdateValue, onChangeValue, updateGroup, toggleUpdateGroup, removeGroup,\n  } = GroupStore;\n  const { id, groupName, updateStatus } = data;\n\n  const popMenu = (\n    <>\n      <CustomList onClick={(e) => toggleUpdateGroup(e, id)}>수정<EditOutlined /></CustomList>\n      <CustomList onClick={() => removeGroup(id)}>삭제<DeleteOutlined /></CustomList>\n    </>\n  );\n\n  return (\n    <div>\n      {\n        updateStatus ? (\n          <FlexBox>\n            <div>\n              <CustomInput name=\"groupUpdateValue\" value={groupUpdateValue} onChange={onChangeValue} />\n            </div>\n            <IconWrap>\n              <CheckOutlined onClick={() => updateGroup(id)} />\n              <CloseOutlined onClick={(e) => toggleUpdateGroup(e, id)} />\n            </IconWrap>\n          </FlexBox>\n        ) : (\n          <FlexBox>\n            <GroupName>{groupName}</GroupName>\n            <Popover content={popMenu} trigger=\"focus\" placement=\"rightTop\">\n              <ActionButton>\n                <MoreOutlined />\n              </ActionButton>\n            </Popover>\n          </FlexBox>\n        )\n      }\n    </div>\n  );\n});\n\nconst CustomInput = styled(Input)`\n  background: rgb(40 39 44);\n  border: 1px solid #4a4a4a;\n  padding: 1px 11px;\n  color: rgba(255, 255, 255, 0.65);\n\n  :focus, :hover {\n    border-color: #fff;\n    color: #fff;\n  }\n`;\n\nconst IconWrap = styled.div`\n  margin-left: 8px; \n\n  & span:last-child {\n    margin-left: 0 !important;\n    margin-right: 0 !important;\n  }\n`;\n\nconst FlexBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst ActionButton = styled(Button)`\n  cursor: pointer;\n  background: 0;\n  border: 0;\n  padding: 0;\n  color: rgba(255, 255, 255, 0.65);\n\n  & > span {\n    margin-right: 0 !important;\n  }\n\n  &:hover, &:focus, &:active {\n    opacity: 0.7;\n    background: 0;\n    border: 0;\n    box-shadow: none;\n  }\n`;\n\nconst CustomList = styled(List)`\n  &:not(:last-child) .ant-spin-container {\n    margin-bottom: 6px;\n  }\n\n  & .ant-spin-container {\n    cursor: pointer;\n    font-size: 12px;\n    color: #000;\n\n    & span {\n      margin-left: 12px;\n    }\n  }\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst GroupName = styled.span`\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport default GroupItem;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\AccountCard.js",["100"],"import { Suspense } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Card, Avatar, Row, Divider, Popover, List, Button,\n} from 'antd';\nimport {\n  MoreOutlined,\n  EditOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport useStores from '../../../Stores/UseStore';\nimport Loading from './Util/Loading';\n\nconst AccountCard = observer(({ data, linkedAccountList, selectedGroup }) => {\n  const {\n    id, siteNameKr, siteNameEng, siteUrl, siteIcon, accountId, accountPwd, linkId,\n  } = data;\n  const { AccountStore, LinkedAccountStore } = useStores();\n  const { removeAccount, getAccountDetail } = AccountStore;\n  const { getLinkedAccountDetail, removeLinkedAccount } = LinkedAccountStore;\n  const isLink = selectedGroup === 0;\n  const filteredLink = linkId ? linkedAccountList.filter((v) => v.id === linkId)[0] : '';\n\n  const popMenu = (\n    <>\n      <CustomList\n        onClick={() => (isLink ? getLinkedAccountDetail(id) : getAccountDetail(id))}\n      >\n        수정<EditOutlined />\n      </CustomList>\n      <CustomList\n        onClick={() => (isLink ? removeLinkedAccount(id) : removeAccount(id))}\n      >\n        삭제<DeleteOutlined />\n      </CustomList>\n    </>\n  );\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <CustomCard>\n        <CustomRow>\n          <CustomAvatar src={siteIcon} />\n          <PropWrap>\n            <SiteName>\n              <span>{siteNameKr}</span>\n              <span>{siteNameEng}</span>\n            </SiteName>\n            <SiteUrl>{siteUrl}</SiteUrl>\n          </PropWrap>\n        </CustomRow>\n        <CustomDivider />\n        <CustomRow>\n          { isLink ? '' : <CustomAvatar src={!linkId ? siteIcon : filteredLink.siteIcon} /> }\n          <PropWrap isIcon={isLink}>\n            <AccountRow>\n              <Title>ID</Title>\n              <span>{!linkId ? accountId : filteredLink.accountId}</span>\n            </AccountRow>\n            <AccountRow>\n              <Title>PW</Title>\n              <span>{!linkId ? accountPwd : filteredLink.accountPwd}</span>\n            </AccountRow>\n          </PropWrap>\n        </CustomRow>\n        <Popover content={popMenu} trigger=\"focus\">\n          <ActionButton>\n            <MoreOutlined />\n          </ActionButton>\n        </Popover>\n      </CustomCard>\n    </Suspense>\n  );\n});\n\nconst CustomCard = styled(Card)`\n  margin: 12px;\n  color: #fff;\n  background: #1a1d21;\n  border: 1px solid #3f3f3f;\n  color: rgba(255, 255, 255, 0.65);\n\n  & p {\n    margin-bottom: 0;\n  }\n`;\n\nconst CustomRow = styled(Row)`\n  align-items: center;\n  flex-flow: row nowrap;\n\n  &:first-child {\n    margin-bottom: 12px;\n  }\n`;\n\nconst AccountRow = styled(Row)`\n  flex-flow: row nowrap;\n\n  & > span:last-child {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n`;\n\nconst CustomAvatar = styled(Avatar)`\n  min-width: 32px;\n  height: 32px;\n  user-select: none;\n`;\n\nconst PropWrap = styled.div`\n  margin-left: ${(props) => (props.isIcon ? '0px' : '18px')};\n  overflow: hidden;\n`;\n\nconst SiteName = styled.div`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  & span {\n    font-size: 14px;\n    font-weight: 500;\n    color: #3574b0;\n  }\n\n  & span:first-child {\n    margin-right: 5px;\n    font-size: 16px;\n    color: #4694df;\n  }\n`;\n\nconst SiteUrl = styled.div`\n  font-size: 11px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nconst Title = styled.span`\n  margin-right: 10px;\n  color: #fff;\n  font-weight: 500;\n`;\n\nconst ActionButton = styled(Button)`\n  position: absolute;\n  top: 14px;\n  right: 14px;\n  cursor: pointer;\n  background: 0;\n  border: 0;\n  padding: 0;\n  color: rgba(255, 255, 255, 0.65);\n\n  &:hover, &:focus, &:active {\n    opacity: 0.7;\n    background: 0;\n    border: 0;\n    box-shadow: none;\n  }\n`;\n\nconst CustomDivider = styled(Divider)`\n  margin: 12px 0;\n  border-top: 1px solid rgb(63 63 63);\n`;\n\nconst CustomList = styled(List)`\n  &:not(:last-child) .ant-spin-container {\n    margin-bottom: 6px;\n  }\n\n  & .ant-spin-container {\n    cursor: pointer;\n    font-size: 12px;\n    color: #000;\n\n    & span {\n      margin-left: 19px;\n    }\n  }\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport default AccountCard;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\CreateAccountCard.js",["101"],"import styled from 'styled-components';\nimport { Card } from 'antd';\nimport {\n  PlusOutlined,\n} from '@ant-design/icons';\n\nconst AccountCard = () => (\n  <CustomCard>\n    <CustomPlusOutlined style={{ fontSize: '32px', color: '#fff' }} />\n  </CustomCard>\n);\n\nconst CustomCard = styled(Card)`\n  margin: 12px;\n  color: #fff;\n  background: #25282c;\n  border: 1px dashed #686868;\n  height: calc(100% - 24px);\n  cursor: pointer;\n  transition: 0.5s;\n\n  & .ant-card-body {\n    display: flex;\n    height: 100%;\n    text-align: center;\n  }\n\n  &:hover {\n    opacity: 0.7;\n    background: #35393d;\n  }\n`;\n\nconst CustomPlusOutlined = styled(PlusOutlined)`\n  text-align: center;\n  margin: 0 auto;\n  align-self: center;\n`;\n\nexport default AccountCard;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Form\\AccountForm.js",["102"],"import { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Form, Input, Modal, Select, Button, Tag,\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport useStores from '../../../../Stores/UseStore';\n\nconst { Option } = Select;\n\nconst AccountForm = observer(({ accountFormOption, linkedAccountList }) => {\n  const { isVisible, isUpdate } = accountFormOption;\n  const { AccountStore } = useStores();\n  const {\n    accountFormat, formSubmit, formChangeHandle, fileChangeHandle,\n    linkIdChangeHandle, isLink, linkedOption, modalClose, deleteLocalIcon,\n  } = AccountStore;\n  const {\n    siteNameKr, siteNameEng, siteUrl, isLocalIcon,\n    accountId, accountPwd, linkId, iconName,\n  } = accountFormat;\n  // eslint-disable-next-line max-len\n  const linkedData = linkedAccountList.map((v) => <Option value={v.id} selected key={v.id}>{v.siteNameKr}</Option>);\n\n  return (\n    <CustomModal\n      title={isUpdate ? '계정 정보 수정' : '계정 정보 등록'}\n      centered\n      visible={isVisible}\n      onOk={() => (isUpdate ? formSubmit('update') : formSubmit('create'))}\n      onCancel={modalClose}\n      width={500}\n    >\n      <CustomForm layout=\"vertical\" size=\"large\">\n        <Form.Item label=\"사이트 한글 이름\">\n          <CustomInput name=\"siteNameKr\" value={siteNameKr} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"사이트 영문 이름\">\n          <CustomInput name=\"siteNameEng\" value={siteNameEng} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"사이트 URL\">\n          <CustomInput name=\"siteUrl\" value={siteUrl} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"계정 ID\">\n          <CustomSelect value={isLink} onChange={(e) => linkedOption(e)} style={{ width: '25%' }}>\n            <Option value={false}>직접 입력</Option>\n            <Option value>계정 연동</Option>\n          </CustomSelect>\n          { isLink\n            ? (\n              <CustomSelect name=\"linkId\" value={linkId} style={{ width: '70%' }} disabled={!isLink} onChange={(e) => linkIdChangeHandle(e)}>\n                {linkedData}\n              </CustomSelect>\n            ) : (\n              <CustomInput name=\"accountId\" style={{ width: '70%' }} value={accountId} onChange={(e) => formChangeHandle(e)} />\n            )}\n        </Form.Item>\n        <Form.Item label=\"계정 PW\">\n          <CustomInput name=\"accountPwd\" value={accountPwd} disabled={isLink} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"\">\n          <Button size=\"default\" icon={<UploadOutlined />} onClick={fileChangeHandle}>아이콘 직접 선택</Button>\n          {\n            isLocalIcon\n              ? (\n                <CustomTag closable onClose={deleteLocalIcon}>\n                  {iconName}\n                </CustomTag>\n              ) : ''\n          }\n        </Form.Item>\n      </CustomForm>\n    </CustomModal>\n  );\n});\n\nconst CustomModal = styled(Modal)`\n  .ant-modal-close-x {\n    height: 54px;\n    line-height: 54px;\n  }\n\n  * {\n    background-color: #1a1d21;\n    color: #fff !important;\n  }\n\n  .ant-modal-header {\n    border-bottom: 1px solid #30353c;\n  }\n\n  .ant-modal-footer {\n    border-top: 0;\n  }\n\n  .ant-btn {\n    border: 1px solid #6c6e71;\n    padding: 4px 30px;\n\n    > span { \n      background: transparent;\n    }\n\n    :hover, :active, :focus {\n      background: #2a2d31;\n    }\n  }\n\n  .ant-btn-primary {\n    border: 0;\n    background: linear-gradient(45deg, #3b9c78, #2278ab, #7022ab);\n    padding: 4px 40px;\n    \n    :hover, :active, :focus {\n      background: linear-gradient(45deg,#3b9c78,#2298ab,#c81ddc);\n    }\n  }\n\n  .ant-input-disabled {\n    background: #181819;\n    border: 1px solid #454b52;\n  }\n`;\n\nconst CustomForm = styled(Form)`\n  .ant-form-item {\n    margin-bottom: 16px;\n  }\n\n  .ant-form-item-label {\n    padding: 0;\n  }\n\n  .ant-form-item-label > label {\n    color: #d8d8d8 !important;\n  }\n`;\n\nconst CustomInput = styled(Input)`\n  border: 1px solid #454b52;\n`;\n\nconst CustomSelect = styled(Select)`\n  :first-child {\n    margin-right: 5%;\n  }\n\n  .ant-select-selector {\n    background-color: transparent !important;\n    border: 1px solid #454b52 !important;\n    padding: 0.5px 11px !important;\n  }\n`;\n\nconst CustomTag = styled(Tag)`\n  margin-left: 10px;\n`;\n\nexport default AccountForm;\n","E:\\project\\account-management-platform\\src\\Components\\Layout\\Content\\Form\\linkedAccountFrom.js",["103"],"import { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport {\n  Form, Input, Modal, Button, Tag,\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport useStores from '../../../../Stores/UseStore';\n\nconst linkedAccountForm = observer(({ formOption }) => {\n  const { isVisible, isUpdate } = formOption;\n  const { LinkedAccountStore } = useStores();\n  const {\n    linkedAccountFormat, formSubmit, formChangeHandle,\n    fileChangeHandle, modalClose, deleteLocalIcon,\n  } = LinkedAccountStore;\n  const {\n    siteNameKr, siteNameEng, accountId,\n    accountPwd, iconUse, iconName,\n  } = linkedAccountFormat;\n\n  return (\n    <CustomModal\n      title={isUpdate ? '연동계정 정보 수정' : '연동계정 정보 등록'}\n      centered\n      visible={isVisible}\n      onOk={() => (isUpdate ? formSubmit('update') : formSubmit('create'))}\n      onCancel={modalClose}\n      width={500}\n    >\n      <CustomForm layout=\"vertical\" size=\"large\">\n        <Form.Item label=\"한글 이름\">\n          <CustomInput name=\"siteNameKr\" value={siteNameKr} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"영문 이름\">\n          <CustomInput name=\"siteNameEng\" value={siteNameEng} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"계정 ID\">\n          <CustomInput name=\"accountId\" value={accountId} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"계정 PW\">\n          <CustomInput name=\"accountPwd\" value={accountPwd} onChange={(e) => formChangeHandle(e)} />\n        </Form.Item>\n        <Form.Item label=\"\">\n          <Button size=\"default\" icon={<UploadOutlined />} onClick={fileChangeHandle}>아이콘 선택</Button>\n          {\n            iconUse\n              ? (\n                <CustomTag closable onClose={deleteLocalIcon}>\n                  {iconName}\n                </CustomTag>\n              ) : ''\n          }\n        </Form.Item>\n      </CustomForm>\n    </CustomModal>\n  );\n});\n\nconst CustomModal = styled(Modal)`\n  .ant-modal-close-x {\n    height: 54px;\n    line-height: 54px;\n  }\n\n  * {\n    background-color: #1a1d21;\n    color: #fff !important;\n  }\n\n  .ant-modal-header {\n    border-bottom: 1px solid #30353c;\n  }\n\n  .ant-modal-footer {\n    border-top: 0;\n  }\n\n  .ant-btn {\n    border: 1px solid #6c6e71;\n\n    > span { \n      background: transparent;\n    }\n\n    :hover, :active, :focus {\n      background: #2a2d31;\n    }\n  }\n\n  .ant-btn-primary {\n    background: #1890ff;\n    border-color: #1890ff;\n    \n    :hover {\n      background: #65b5ff;\n    }\n  }\n`;\n\nconst CustomForm = styled(Form)`\n  .ant-form-item {\n    margin-bottom: 16px;\n  }\n\n  .ant-form-item-label {\n    padding: 0;\n  }\n\n  .ant-form-item-label > label {\n    color: #d8d8d8 !important;\n  }\n`;\n\nconst CustomInput = styled(Input)`\n  border: 1px solid #454b52;\n`;\n\nconst CustomTag = styled(Tag)`\n  margin-left: 10px;\n`;\n\nexport default linkedAccountForm;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},{"ruleId":null,"fatal":true,"severity":2,"message":"104"},"Parsing error: Must use import to load ES Module: E:\\project\\account-management-platform\\node_modules\\eslint\\node_modules\\eslint-scope\\lib\\definition.js\nrequire() of ES modules is not supported.\nrequire() of E:\\project\\account-management-platform\\node_modules\\eslint\\node_modules\\eslint-scope\\lib\\definition.js from E:\\project\\account-management-platform\\node_modules\\babel-eslint\\lib\\require-from-eslint.js is an ES module file as it is a .js file whose nearest parent package.json contains \"type\": \"module\" which defines all .js files in that package scope as ES modules.\nInstead rename definition.js to end in .cjs, change the requiring code to use import(), or remove \"type\": \"module\" from E:\\project\\account-management-platform\\node_modules\\eslint\\node_modules\\eslint-scope\\package.json."]